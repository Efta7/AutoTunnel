#! /bin/bash

if [[ `whoami` != "root" ]]
then
	echo "Must be root to initialize this deamon. Exiting"
	exit 255
fi

if [[ -f "$1" ]] && [[ -n "$1" ]]
then
	conffile="$1"
else
	conffile="/etc/autotunnel.conf"
fi

if [[ ! -f "$conffile" ]]
then
	echo "Missing configuration file. Exiting"
	exit 254
fi

. "${conffile}"

[[ -z "${PORT}" ]] && PORT="10000"
[[ -z "${USER}" ]] && USER="tunnel"
[[ -z "${INTERVAL}" ]] && INTERVAL="300"
[[ -z "${SEARCHRADIUS}" ]] && SEARCHRADIUS="10"

if [[ -z "${KEY}" ]]
then
	echo "Missing master list key. Exiting"
	exit 253
fi

if [[ -z "${MASTERS}" ]]
then
	echo "Missing master list page id. Exiting"
	exit 252
fi


[[ "$INTERVAL" -ge 300 ]] && export TOUT="-t"
[[ "$INTERVAL" -lt 300 ]] && export INTERVAL=""

trap cleanUp SIGINT SIGHUP SIGKILL SIGTERM

function cleanUp()
{
	export SSHPID=`cat /tmp/tunnel.pid 2> /dev/null`
	kill -9 "${SSHPID}"  > /dev/null 2>&1
	rm -f /tmp/tunnel.pid
	rm -f /tmp/tunnel.fifo
	rm -f /tmp/TUNNELS
	rm -f /tmp/TUNNELS.tmp
	iptables -F
	iptables -X
	iptables -Z
	iptables -t nat -F
	iptables -t nat -X
	iptables -t nat -Z
	killall redsocks 2> /dev/null
	rm -f /tmp/redsocks.conf 2> /dev/null
	killall -9 autotunnel > /dev/null 2>&1
	exit
}

function socksConfig()
{
	iptables -F
	iptables -X
	iptables -Z
	iptables -t nat -F
	iptables -t nat -X
	iptables -t nat -Z
	killall redsocks 2> /dev/null
	rm -f redsocks.conf 2> /dev/null

	echo 'base{log_debug = on; log_info = on; log = "file:/tmp/reddi.log";
	daemon = on; redirector = iptables;}
	redsocks { local_ip = 127.0.0.1; local_port = 31338; ip = 127.0.0.1;
	port = '${PORT}'; type = socks5; }' > /tmp/redsocks.conf

	redsocks -c /tmp/redsocks.conf
	iptables -t nat -N REDSOCKS
	iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A REDSOCKS -p tcp -j DNAT --to 127.0.0.1:31338
	iptables -t nat -A OUTPUT -p tcp -j REDSOCKS
	iptables -t nat -I REDSOCKS -d $1 -j RETURN
}

function getList()
{
	rm -f /tmp/TUNNELS.tmp
	for PAGE in `echo ${MASTERS} | tr ' ' '\n'`
	do
		[[ -n `cat /tmp/TUNNELS.tmp 2> /dev/null` ]] && break
		echo -e "\nRefreshing list [Trying $PAGE]"
		postid=`curl -m 5 -s https://m.facebook.com/"${PAGE}" | grep -o '/story.php?story_fbid=[0-9]*' | awk -F '=' '{print $2}' | sort | uniq | head -n1`
		curl -m 5 -s https://m.facebook.com/"${PAGE}"/posts/"${postid}" | grep -Eo "# [[:graph:]]* #" | head -n1 | awk -F '#' '{print $2}' | \
		sed 's/^ //g' | sed 's/ $//g' | openssl enc -aes-256-cbc -pass pass:"${KEY}" -d -p -base64 -A | sed 's/SOCKS //g' | sort | uniq | \
		sed 's/^ //g' | tr -s ' ' | sed 's/ $//g' | tr ' ' '.' | tr '=' ':' | sed -e '/[a-z]/d' > /tmp/TUNNELS.tmp
	done
}

function sortList()
{
	echo -e "\nSorting list ..."
	list=`cat /tmp/TUNNELS.tmp | shuf | head -n "${SEARCHRADIUS}"`
	for i in $list
	do
		ip=`echo "${i}" | awk -F ':' '{print $1}'`
		ping -w 1 -q -c 1 "${ip}" | grep min/avg/max/mdev | awk -F '=' '{print $2}' | awk -F '/' '{print $2}' | sed 's/$/ '$i'/g'
	done | sort -n | awk '{print $2}' > /tmp/TUNNELS
}

rm -f /tmp/tunnel.fifo
rm -f /tmp/TUNNELS
rm -f /tmp/TUNNELS.tmp
lastip=""

mkfifo /tmp/tunnel.fifo
chmod a+rw /tmp/tunnel.fifo

while [[ -z `cat /tmp/TUNNELS.tmp 2> /dev/null` ]]
do
	getList
done

while cat /tmp/tunnel.fifo; do true; done | while true
do
	[[ -z `cat /tmp/TUNNELS 2> /dev/null | head -n1` ]] && sortList
	ipcont=`cat /tmp/TUNNELS | head -n1`
	ip=`echo "$ipcont" | awk -F ':' '{print $1}'`
	if [[ "${ip}" == "${lastip}" ]]
	then
		ipcont=`cat /tmp/TUNNELS | sed '/'${ip}'/d' | head -n1`
		ip=`echo "$ipcont" | awk -F ':' '{print $1}'`
	fi
	port=`echo "$ipcont" | awk -F ':' '{print $2}'`
	lastip="${ip}"
	echo -e "\nUsing: ${ip}:${port}"
	ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -N "$USER"@"$ip" -D "${PORT}" -p "${port}" > /dev/null 2>&1 &
	pid=$!
	disown
	export SSHPID="${pid}"
	echo "${SSHPID}" > /tmp/tunnel.pid
	socksConfig "$ip"
	sleep 1
	while kill -0 "${SSHPID}" > /dev/null 2>&1
	do
		if [[ -n "${TOUT}" ]]
		then
			elapsed=0
			while [[ "$elapsed" -lt "${INTERVAL}" ]]
			do
				read "${TOUT}" 1 -s -n 1 answer && break
				elapsed=$((elapsed+1))
				kill -0 "${SSHPID}" 2> /dev/null || break
			done
		fi
		[[ -z "${TOUT}" ]] && read -s -n 1 answer
		[[ "$answer" == "x" ]] && cleanUp
		sortList
		kill -9 "${SSHPID}" > /dev/null 2>&1
		cat /tmp/TUNNELS 2> /dev/null | head -n1 > /dev/null
	done
done

cleanUp
